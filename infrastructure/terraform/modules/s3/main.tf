# S3 bucket for storing audio files generated by the Femtosense Voice Command Generation PoC system

# AWS Provider configuration
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

# Import module-specific variables
variable "bucket_name" {}
variable "environment" {}

# Create the S3 bucket
resource "aws_s3_bucket" "audio_storage" {
  bucket = var.bucket_name
  acl    = "private"

  # Enable versioning for data protection and recovery
  versioning {
    enabled = true
  }

  # Enable server-side encryption
  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }

  # Configure lifecycle rules for cost optimization
  lifecycle_rule {
    enabled = true

    transition {
      days          = 30
      storage_class = "STANDARD_IA"
    }
  }

  # Add tags for better resource management
  tags = {
    Name        = "femtosense-voice-commands-${var.environment}"
    Environment = var.environment
    Project     = "Femtosense Voice Command Generation PoC"
  }
}

# Block all public access to the S3 bucket
resource "aws_s3_bucket_public_access_block" "audio_storage_public_access_block" {
  bucket = aws_s3_bucket.audio_storage.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Enforce TLS for all S3 operations
resource "aws_s3_bucket_policy" "audio_storage_force_tls" {
  bucket = aws_s3_bucket.audio_storage.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "ForceSSLOnlyAccess"
        Effect    = "Deny"
        Principal = "*"
        Action    = "s3:*"
        Resource = [
          aws_s3_bucket.audio_storage.arn,
          "${aws_s3_bucket.audio_storage.arn}/*"
        ]
        Condition = {
          Bool = {
            "aws:SecureTransport" = "false"
          }
        }
      }
    ]
  })
}

# Configure CORS rules for the S3 bucket
resource "aws_s3_bucket_cors_configuration" "audio_storage_cors" {
  bucket = aws_s3_bucket.audio_storage.id

  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["GET", "PUT", "POST"]
    allowed_origins = ["*"]  # This should be restricted in production
    expose_headers  = ["ETag"]
    max_age_seconds = 3000
  }
}

# Output the bucket name and ARN for use in other modules
output "bucket_name" {
  description = "Name of the created S3 bucket"
  value       = aws_s3_bucket.audio_storage.id
}

output "bucket_arn" {
  description = "ARN of the created S3 bucket"
  value       = aws_s3_bucket.audio_storage.arn
}