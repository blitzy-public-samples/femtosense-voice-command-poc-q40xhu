name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/backend/**'

env:
  PYTHON_VERSION: 3.7
  DOCKER_IMAGE: femtosense/voice-command-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 src/backend
          black --check src/backend
          isort --check-only src/backend

      - name: Run type checking
        run: |
          pip install mypy
          mypy src/backend

      - name: Run tests with coverage
        run: |
          pip install pytest pytest-cov
          pytest src/backend/tests --cov=src/backend --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          flags: backend
          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: src/backend
          push: false
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Verify container starts successfully
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }}:${{ github.sha }} python -c "import narakeet_generate_stt; print('Container started successfully')"

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install safety
        run: pip install safety

      - name: Run dependency vulnerability scan
        run: safety check -r src/backend/requirements.txt